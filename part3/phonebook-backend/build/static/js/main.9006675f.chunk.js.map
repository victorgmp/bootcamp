{"version":3,"sources":["services/contacts/index.js","components/Filter/index.js","components/ContactForm/index.js","components/Contacts/index.js","components/Notification/index.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","updatedObject","put","delete","Filter","filter","onChange","name","value","ContactForm","values","handleChange","handleSubmit","onSubmit","number","type","Contacts","contacts","handleDelete","map","contact","onClick","Notification","message","className","content","App","useState","setContacts","setValues","setFilter","setMessage","useEffect","contactService","contactsList","catch","error","console","log","contactsToShow","toLowerCase","indexOf","handleMessage","window","confirm","e","target","preventDefault","newContact","find","previousContact","n","returnedContact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9006675f.chunk.js","sourcesContent":["import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/contacts'\n// const baseUrl = 'https://agile-shore-54845.herokuapp.com/api/contacts'\nconst baseUrl = '/api/contacts'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, updatedObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }\n","import React from 'react'\n\nconst Filter = ({ filter, onChange }) => (\n  <div>\n    filter shown with: \n  <input\n      name=\"filter\"\n      value={filter}\n      onChange={onChange}\n    />\n  </div>\n)\n\nexport default Filter\n","import React from 'react'\n\nconst ContactForm = ({ values, handleChange, handleSubmit }) => (\n  <form onSubmit={handleSubmit}>\n    <div>\n      name: <input name=\"name\" value={values.name} onChange={handleChange} />\n    </div>\n    <div>\n      number: <input name=\"number\" value={values.number} onChange={handleChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nexport default ContactForm\n","import React from 'react'\n\nconst Contacts = ({ contacts, handleDelete }) => (\n  <ul>\n    {contacts.map(contact =>\n      <li key={contact.id}>\n        {contact.name}: {contact.number}\n        <button onClick={() => handleDelete(contact.id, contact.name)}>delete</button>\n      </li>\n    )}\n  </ul>\n)\n\nexport default Contacts\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  \n  return (\n    <div className={message.type === 'error' ? 'error' : 'success'}>\n      {message.content}\n    </div>\n  )\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\n\nimport contactService from './services/contacts'\n\nimport Filter from './components/Filter'\nimport ContactForm from './components/ContactForm'\nimport Contacts from './components/Contacts'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const initialValues = {\n    name: '',\n    number: ''\n  }\n\n  const [contacts, setContacts] = useState([])\n  const [values, setValues] = useState(initialValues)\n  const [filter, setFilter] = useState('')\n  const [message, setMessage] = useState(null)\n\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(contactsList => {\n        setContacts(contactsList)\n      }).catch(error => {\n        console.log('error trying to get users', error)\n      })\n  }, [])\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value\n    })\n  }\n\n  const contactsToShow = contacts.filter(contact =>\n    contact.name.toLowerCase().indexOf(filter.toLowerCase()) > -1\n  );\n\n  const handleMessage = (message) => {\n    return window.confirm(message)\n  }\n  \n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const newContact = {\n      name: values.name,\n      number: values.number\n    }\n    const nameExist = contacts.find(contact => contact.name === values.name)\n\n    if (nameExist) {\n      const message = `${values.name} is already added to phonebook, replace the old number with a new one?`\n      const result = handleMessage(message)\n\n      if (result) {\n        const previousContact = contacts.find(n => n.name === values.name);\n\n        contactService\n          .update(previousContact.id, newContact)\n          .then(returnedContact => {\n            setContacts(contacts.map(contact =>\n              contact.id !== previousContact.id ?  contact : returnedContact\n            ))\n\n            setMessage({\n              content: `Updated ${values.name}`,\n              type: 'success'\n            })\n          }).catch(error => {\n            console.log('error trying to update user', error)\n            setMessage({\n              content: `Information of ${values.name} has already been removed from server`,\n              type: 'error'\n            })\n          })\n      }\n    } else {\n\n      contactService\n        .create(newContact)\n        .then(returnedContact => {\n          setContacts([\n            ...contacts,\n            returnedContact\n          ])\n\n          setMessage({\n            content: `Added ${values.name}`,\n            type: 'success'\n          })\n        }).catch(error => {\n          console.log('error trying to create user', error.response.data)\n          setMessage({\n            content: error.response.data.error,\n            type: 'error'\n          })\n        })\n    }\n  }\n  \n  const handleDelete = (id, name) => {\n    // console.log('id', id)\n    const message = `do you really want to eliminate ${name}?`\n    const result = handleMessage(message)\n\n    if (result) {\n      contactService\n        .remove(id)\n        .then(() => {\n          setContacts(contacts.filter(contact => contact.id !== id))\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification message={message} />\n\n      <Filter filter={filter} onChange={(e) => setFilter(e.target.value)} />\n\n      <h2>Add a new</h2>\n      <ContactForm\n        values={values}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n\n      <h2>Numbers</h2>\n      <Contacts\n        contacts={contactsToShow}\n        handleDelete={(id, name) => handleDelete(id, name)}\n      />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}